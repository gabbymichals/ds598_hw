{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "DS598GabbyM"
		},
		"Data Lake Weather_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'Data Lake Weather'"
		},
		"GitHub_DS598_credential": {
			"type": "secureString",
			"metadata": "Secure string for 'credential' of 'GitHub_DS598'"
		},
		"Data Lake Weather_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://ds598storagegabbym.dfs.core.windows.net/"
		},
		"GitHub_DS598_properties_typeProperties_username": {
			"type": "string",
			"defaultValue": "gabbymichals"
		},
		"Historical Weather Pollution_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "http://api.openweathermap.org/"
		},
		"Key Vault 1_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://weatherdataDS598.vault.azure.net/"
		},
		"Open Weather Historical_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://history.openweathermap.org/"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/Air Pollution Pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Web1",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "GET",
							"headers": {},
							"url": "https://weatherdatads598.vault.azure.net/secrets/ds598weatherkey1?api-version=7.0",
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net"
							}
						}
					},
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Web1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "HttpReadSettings",
									"requestMethod": "GET"
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "pollution_data",
								"type": "DatasetReference",
								"parameters": {
									"lat": 42.361145,
									"lon": -71.057083,
									"start": {
										"value": "@div(sub(ticks(addDays(utcNow(), -365)), ticks('1970-01-01T00:00:00Z')), 10000000)",
										"type": "Expression"
									},
									"end": {
										"value": "@div(sub(ticks(utcNow()), ticks('1970-01-01T00:00:00Z')),10000000)",
										"type": "Expression"
									},
									"appid": {
										"value": "@activity('Web1').output.value",
										"type": "Expression"
									},
									"datatype": "'hour'"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "pollution_sink",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/pollution_data')]",
				"[concat(variables('factoryId'), '/datasets/pollution_sink')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Weather pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Web1",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "GET",
							"headers": {},
							"url": "https://weatherdatads598.vault.azure.net/secrets/ds598weatherkey1?api-version=7.0",
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net"
							}
						}
					},
					{
						"name": "ForEach",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Web1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@range(0,pipeline().parameters.weeks)",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "JsonSource",
											"storeSettings": {
												"type": "HttpReadSettings",
												"requestMethod": "GET"
											},
											"formatSettings": {
												"type": "JsonReadSettings"
											}
										},
										"sink": {
											"type": "JsonSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "JsonWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "weather_data",
											"type": "DatasetReference",
											"parameters": {
												"dataType": "hour",
												"lat": 42.36,
												"lon": -71.06,
												"appid": "@activity('Web1').output.value",
												"start": {
													"value": "@div(sub(ticks(addDays(utcNow(),mul(add(item(),1),-7))), ticks('1970-01-01T00:00:00Z')), 10000000)",
													"type": "Expression"
												},
												"end": {
													"value": "@div(sub(ticks(addDays(utcNow(), mul(item(),-7))), ticks('1970-01-01T00:00:00Z')), 10000000)",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "weather_sink",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"weeks": {
						"type": "int",
						"defaultValue": 52
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/weather_data')]",
				"[concat(variables('factoryId'), '/datasets/weather_sink')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/preprocess_bronze_pollution')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "pollution_dataflow",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "pollution_dataflow",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"PollutionSource": {},
									"SilverPollution": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/pollution_dataflow')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/preprocess_bronze_weather')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "weather_dataflow",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "weather_dataflow",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"weather": {},
									"SilverWeatherSink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/weather_dataflow')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PollutionSilver')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Data Lake Weather",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "Silver",
						"fileSystem": "weathercontainer"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Data Lake Weather')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/WeatherSilver')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Data Lake Weather",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "Silver",
						"fileSystem": "weathercontainer"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Data Lake Weather')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pollution_data')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Historical Weather Pollution",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"lat": {
						"type": "float",
						"defaultValue": 42.361145
					},
					"lon": {
						"type": "float",
						"defaultValue": -71.057083
					},
					"start": {
						"type": "string"
					},
					"end": {
						"type": "string"
					},
					"appid": {
						"type": "string"
					},
					"datatype": {
						"type": "string",
						"defaultValue": "'hour'"
					}
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "HttpServerLocation",
						"relativeUrl": {
							"value": "data/2.5/air_pollution/history?lat=@{dataset().lat}&lon=@{dataset().lon}&start=@{dataset().start}&end=@{dataset().end}&appid=@{dataset().appid}\n\n",
							"type": "Expression"
						}
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Historical Weather Pollution')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pollution_sink')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Data Lake Weather",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "historyd527edc3c5673bccd1920dd5b6189bbd317ba173555b8627c5f12c5bc9de97e3",
						"folderPath": "Bronze-Weather/data/2.5/air_pollution",
						"fileSystem": "weathercontainer"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Data Lake Weather')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/weather_data')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Open Weather Historical",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"dataType": {
						"type": "string",
						"defaultValue": "hour"
					},
					"lat": {
						"type": "float",
						"defaultValue": 42.36
					},
					"lon": {
						"type": "float",
						"defaultValue": -71.06
					},
					"appid": {
						"type": "string",
						"defaultValue": "@activity('Web1').output.value"
					},
					"start": {
						"type": "string",
						"defaultValue": "@addDays(utcnow(), -365)"
					},
					"end": {
						"type": "string",
						"defaultValue": "@addDays(utcnow(), -1)"
					}
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "HttpServerLocation",
						"relativeUrl": {
							"value": "data/2.5/history/city?lat=@{dataset().lat}&lon=@{dataset().lon}&type=@{dataset().dataType}&start=@{dataset().start}&end=@{dataset().end}&appid=@{dataset().appid}",
							"type": "Expression"
						}
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Open Weather Historical')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/weather_sink')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Data Lake Weather",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "Bronze-Weather/data/2.5/history",
						"fileSystem": "weathercontainer"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Data Lake Weather')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Data Lake Weather')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('Data Lake Weather_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('Data Lake Weather_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/GitHub_DS598')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "GitHub",
				"typeProperties": {
					"username": "[parameters('GitHub_DS598_properties_typeProperties_username')]",
					"credential": {
						"type": "SecureString",
						"value": "[parameters('GitHub_DS598_credential')]"
					},
					"encryptedCredential": "ew0KICAiVmVyc2lvbiI6ICIyMDE3LTExLTMwIiwNCiAgIlByb3RlY3Rpb25Nb2RlIjogIktleSIsDQogICJTZWNyZXRDb250ZW50VHlwZSI6ICJQbGFpbnRleHQiLA0KICAiQ3JlZGVudGlhbElkIjogIkRBVEFGQUNUT1JZQDY5MjlDMUNBLTFENzgtNDM3QS1BQTJFLTc5NDIxMUNDNTA4QV8wYmY0OTQxYy0zYTU5LTRjNzYtODgwYS0wNmQyYTNkMDI0YjkiDQp9"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Historical Weather Pollution')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "HttpServer",
				"typeProperties": {
					"url": "[parameters('Historical Weather Pollution_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Key Vault 1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('Key Vault 1_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Open Weather Historical')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "HttpServer",
				"typeProperties": {
					"url": "[parameters('Open Weather Historical_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pollution_dataflow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "pollution_sink",
								"type": "DatasetReference"
							},
							"name": "PollutionSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "PollutionSilver",
								"type": "DatasetReference"
							},
							"name": "SilverPollution"
						}
					],
					"transformations": [
						{
							"name": "flatten1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "filter1"
						},
						{
							"name": "derivedColumn2"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          coord as (lat as double, lon as double),",
						"          list as (components as (co as double, nh3 as double, no as double, no2 as double, o3 as double, pm10 as double, pm2_5 as double, so2 as double), dt as integer, main as (aqi as short))[]",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine') ~> PollutionSource",
						"PollutionSource foldDown(unroll(list),",
						"     mapColumn(",
						"          lat = coord.lat,",
						"          lon = coord.lon,",
						"          co = list.components.co,",
						"          nh3 = list.components.nh3,",
						"          no = list.components.no,",
						"          o3 = list.components.o3,",
						"          pm10 = list.components.pm10,",
						"          pm2_5 = list.components.pm2_5,",
						"          so2 = list.components.so2,",
						"          timestamp = list.dt,",
						"          aqi = list.main.aqi",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten1",
						"flatten1 derive(corrected_timestamp = iif(length(toString(timestamp)) == 10, toInteger(timestamp), toInteger(null())),",
						"          location = \"Boston\") ~> derivedColumn1",
						"derivedColumn1 filter(!isNull(aqi) && !isNull(corrected_timestamp)) ~> filter1",
						"filter1 derive(date_time = iif(!isNull(corrected_timestamp), toTimestamp(toLong(corrected_timestamp) * 1000), toTimestamp(null())),",
						"          id = concat(location, '_', toString(corrected_timestamp)),",
						"          co = round(toFloat(co),2),",
						"          nh3 = round(toFloat(nh3),2),",
						"          no = round(toFloat(no),2),",
						"          o3 = round(toFloat(o3),2),",
						"          pm10 = round(toFloat(pm10),2),",
						"          pm2_5 = round(toFloat(pm2_5),2),",
						"          so2 = round(toFloat(so2),2)) ~> derivedColumn2",
						"derivedColumn2 select(mapColumn(",
						"          lat,",
						"          lon,",
						"          co,",
						"          nh3,",
						"          no,",
						"          o3,",
						"          pm10,",
						"          pm2_5,",
						"          so2,",
						"          aqi,",
						"          corrected_timestamp,",
						"          location,",
						"          date_time,",
						"          id",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     partitionFileNames:['silver_airpollution_historical'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> SilverPollution"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/pollution_sink')]",
				"[concat(variables('factoryId'), '/datasets/PollutionSilver')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/weather_dataflow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "weather_sink",
								"type": "DatasetReference"
							},
							"name": "weather"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "WeatherSilver",
								"type": "DatasetReference"
							},
							"name": "SilverWeatherSink"
						}
					],
					"transformations": [
						{
							"name": "flatten1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "filter1"
						},
						{
							"name": "derivedColumn2"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          calctime as double,",
						"          city_id as boolean,",
						"          cnt as short,",
						"          cod as short,",
						"          list as (clouds as (all as short), dt as integer, main as (feels_like as double, humidity as short, pressure as short, temp as double, temp_max as double, temp_min as double), rain as ({1h} as double), snow as ({1h} as double), weather as (description as string, icon as string, id as short, main as string)[], wind as (deg as short, gust as double, speed as double))[],",
						"          message as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'singleDocument') ~> weather",
						"weather foldDown(unrollMultiple(list,list.weather),",
						"     mapColumn(",
						"          calctime,",
						"          city_id,",
						"          cnt,",
						"          cod,",
						"          message,",
						"          clouds_all = list.clouds.all,",
						"          timestamp = list.dt,",
						"          feels_like = list.main.feels_like,",
						"          humidity = list.main.humidity,",
						"          pressure = list.main.pressure,",
						"          temp = list.main.temp,",
						"          temp_max = list.main.temp_max,",
						"          temp_min = list.main.temp_min,",
						"          weather_description = list.weather.description,",
						"          weather_icon = list.weather.icon,",
						"          weather_id = list.weather.id,",
						"          weather_main = list.weather.main,",
						"          wind_deg = list.wind.deg,",
						"          wind_gust = list.wind.gust,",
						"          wind_speed = list.wind.speed,",
						"          rain_1h = list.rain.{1h},",
						"          snow_1h = list.snow.{1h}",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten1",
						"flatten1 derive(corrected_timestamp = iif(length(toString(timestamp)) == 10, toInteger(timestamp), toInteger(null())),",
						"          location = \"Boston\") ~> derivedColumn1",
						"derivedColumn1 filter(!isNull(temp) && !isNull(humidity) && !isNull(corrected_timestamp)) ~> filter1",
						"filter1 derive(date_time = iif(!isNull(corrected_timestamp), toTimestamp(toLong(corrected_timestamp) * 1000), toTimestamp(null())),",
						"          id = concat(location, '_', toString(corrected_timestamp)),",
						"          temp_C = round(toFloat(temp) - 273.15, 2),",
						"          temp_min_C = round(toFloat(temp_min) - 273.15, 2),",
						"          temp_max_C = round(toFloat(temp_max) - 273.15, 2),",
						"          feels_like_F = round((toFloat(feels_like) * 9 / 5) + 32, 2),",
						"          temp_min_F = round((toFloat(temp_min) * 9 / 5) + 32, 2),",
						"          temp_max_F = round((toFloat(temp_max) * 9 / 5) + 32, 2),",
						"          lon = -71.0589,",
						"          lat = 42.3601,",
						"          weather_id_value = toInteger(trim(split(toString(weather_id), ': ')[1])),",
						"          weather_main_value = trim(split(toString(weather_main), ': ')[1]),",
						"          {weather_description value} = trim(split(toString(weather_description), ': ')[1]),",
						"          weather_icon_value = trim(split(toString(weather_icon), ': ')[1]),",
						"          rain_1h = iif(isNull(rain_1h), toFloat(0.0), toFloat(rain_1h)),",
						"          snow_1h = iif(isNull(snow_1h), toFloat(0.0), toFloat(snow_1h))) ~> derivedColumn2",
						"derivedColumn2 select(mapColumn(",
						"          clouds_all,",
						"          feels_like_K = feels_like,",
						"          humidity,",
						"          pressure,",
						"          temp_K = temp,",
						"          temp_max_K = temp_max,",
						"          temp_min_K = temp_min,",
						"          wind_deg,",
						"          wind_gust,",
						"          wind_speed,",
						"          rain_1h,",
						"          snow_1h,",
						"          corrected_timestamp,",
						"          location,",
						"          date_time,",
						"          id,",
						"          temp_C,",
						"          temp_min_C,",
						"          temp_max_C,",
						"          feels_like_F,",
						"          temp_min_F,",
						"          temp_max_F,",
						"          lon,",
						"          lat,",
						"          weather_id_value,",
						"          weather_main_value,",
						"          weather_description_value = {weather_description value},",
						"          weather_icon_value",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     partitionFileNames:['silver_weather_historical'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> SilverWeatherSink"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/weather_sink')]",
				"[concat(variables('factoryId'), '/datasets/WeatherSilver')]"
			]
		}
	]
}